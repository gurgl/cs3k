import sbt._
import com.github.siasia.{WebPlugin, PluginKeys}
import Keys._

object Dependencies {

  val ResolutionRepos = Seq(
    "local" at "file:///home/martin/.m2/repository/",
    "Typesafe repo" at "http://repo.typesafe.com/typesafe/releases/"
  )

  object V {
    val Wicket  = "6.0-SNAPSHOT"
    val HibernateManager   = "3.6.9.Final"
    val Specs2  = "1.11"
    val Jetty   = "6.1.26"
    val Slf4j   = "1.6.6"
    val Logback = "1.0.6"
    val Spring = "3.1.1.RELEASE"
    val Lucene = "3.0.3"
    val HinernateTools = "3.2.3.GA"
    val C3P0 = "0.9.1.2"
    val Selenium = "2.0b3"
    val Jackson = "1.5.4"
    val Mysql = "5.1.20"
}

  val Compile = Seq(
    "org.apache.xmlgraphics" % "fop" % "0.95" % "compile"
        exclude("commons-logging", "commons-logging")
        exclude("xalan", "xalan"),
    "org.owasp.antisamy" % "antisamy" % "1.4.5" % "compile"
        exclude("commons-logging", "commons-logging")
        exclude("commons-httpclient", "commons-httpclient"),
    "jaxen" % "jaxen" % "1.1.1" % "compile"
        exclude("jdom", "jdom")
        exclude("xom", "xom"),
    "org.jasypt" % "jasypt" % "1.9.0" % "compile",
    "mysql" % "mysql-connector-java" % V.Mysql % "compile",
    "org.codehaus.jackson" % "jackson-mapper-asl" % V.Jackson % "compile",
    "org.apache.lucene" % "lucene-core" % V.Lucene % "compile",
    "org.apache.wicket" %  "wicket-spring"      % V.Wicket    % "compile",
    "org.apache.wicket" %  "wicket-extensions"      % V.Wicket    % "compile",
    "org.springframework" %  "spring-context-support"    % V.Spring   % "compile",
    "org.springframework" % "spring-web" % V.Spring % "compile",
    "org.springframework" % "spring-tx" % V.Spring % "compile",
    "org.springframework" % "spring-orm" % V.Spring % "compile",
    "org.hibernate" % "hibernate-entitymanager" % V.HibernateManager % "compile",
    "c3p0" % "c3p0" % V.C3P0 % "compile",
    "com.h2database" % "h2" % "1.2.144" % "compile",
    "org.slf4j" % "jcl-over-slf4j" % V.Slf4j % "compile",
    "ch.qos.logback" % "logback-classic" % V.Logback % "compile",
    "javax.activation" % "activation" % "1.1.1" % "compile",
    "javax.mail" % "mail" % "1.4.1" % "compile"
  )

  val Testing = Seq(
    "junit" % "junit" % "4.10" % "test",
    "org.mortbay.jetty" % "jetty" % V.Jetty   % "test",
    "org.specs2" %% "specs2" % V.Specs2  % "test",
    "org.hibernate" % "hibernate-tools" % V.HinernateTools % "test",
    "com.novocode" % "junit-interface" % "0.8" % "test->default",
    "org.seleniumhq.selenium" % "selenium-remote-control" % V.Selenium % "test"
  )

  val Provided = Seq(
    "javax.servlet" % "servlet-api" % "2.5" % "provided"
  )

  val Container = Seq(
    "org.mortbay.jetty" % "jetty" % V.Jetty   % "container"
  )
}

object Build extends sbt.Build {

  lazy val EvalSpot = Project("myproject", file("."))
    .settings(WebPlugin.webSettings: _*)
    .settings(PluginKeys.port in config("container") := 8080)
    .settings(
        organization  := "com.myproject",
        version       := "1.0-SNAPSHOT",
        scalaVersion  := "2.9.2",
        scalacOptions := Seq("-deprecation", "-encoding", "utf8"),
        resolvers     ++= Dependencies.ResolutionRepos,
        libraryDependencies ++= Dependencies.Compile,
        libraryDependencies ++= Dependencies.Container,
        libraryDependencies ++= Dependencies.Provided
    )

    // testing
    .settings(
        libraryDependencies ++= Dependencies.Testing,
        parallelExecution in Test := false, // let Specs2 decide what to be parallel
        testOptions in Test := Seq(Tests.Filter(s => s.endsWith("Test")))
    )

}
